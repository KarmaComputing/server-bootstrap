name: Deploy VPN Client

on:
  workflow_dispatch:
    inputs:
      vpn_ip_address:
        description: 'vpn_ip_address'
        required: true
        default: '192.0.2.1'
      ssh_username:
        description: 'ssh_username'
        required: true
        default: 'root'
      ansible_become_password:
        description: 'ansible_become_password'
        required: false
        default: ''
      ansible_vault_password:
        description: 'ansible_vault_password'
        required: true
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setting up SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VPN_SSH_PRIVATE_KEY }}

    - name: SSH into remote host
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_username }}@${{ inputs.vpn_ip_address }} "date"

    - name: Setup ansible
      run: |
        pip3 install ansible

    - name: Run ansible
      run: |
        cd vpn-client
        echo setting ansible_become_password
        export ansible_become_password=${{ inputs.ansible_become_password }}

        echo Creating ANSIBLE_VAULT_PASSWORD_FILE
        TMPFILE=$(mktemp)
        trap "rm -f ${TMPFILE@Q}" EXIT
        echo -n "${{ inputs.ansible_vault_password }}" > $TMPFILE
        export ANSIBLE_VAULT_PASSWORD_FILE=$TMPFILE
        
        echo Setup inventory
        sed -i 's/changeme ansible_user=changeme/${{ inputs.vpn_ip_address }} ansible_user=${{ inputs.ssh_username }}/' inventory.ini
        
        echo Run deploy vpn playbook
        ansible-playbook -e ansible_become_password='{{ lookup("env"), "ansible_become_password" }}' -i inventory.ini playbooks/deploy-vpn-client.yml
        rm $TMPFILE

    # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ failure() }}

    - name: Smoke test wg0 interface by pinging it internally
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_username }}@${{ inputs.vpn_ip_address }} "ping -c 3 10.10.11.1"
